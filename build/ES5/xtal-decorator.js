import{XtalDecor}from"./xtal-decor.js";import{define}from"./node_modules/xtal-latx/define.js";import{observeCssSelector}from"./node_modules/xtal-latx/observeCssSelector.js";var where_target_selector="where-target-selector";export var XtalDecorator=function(_observeCssSelector){babelHelpers.inherits(XtalDecorator,_observeCssSelector);function XtalDecorator(){babelHelpers.classCallCheck(this,XtalDecorator);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(XtalDecorator).apply(this,arguments))}babelHelpers.createClass(XtalDecorator,[{key:"insertListener",value:function insertListener(e){var _this=this;if(e.animationName===this.id){var target=e.target;setTimeout(function(){_this.appendTemplates(target);_this.attachScripts(target)},0)}}},{key:"attributeChangedCallback",value:function attributeChangedCallback(name,oldVal,newVal){switch(name){case where_target_selector:this._whereTargetSelector=newVal;break;}babelHelpers.get(babelHelpers.getPrototypeOf(XtalDecorator.prototype),"attributeChangedCallback",this).call(this,name,oldVal,newVal)}},{key:"connectedCallback",value:function connectedCallback(){this._upgradeProperties(["whereTargetSelector"]);babelHelpers.get(babelHelpers.getPrototypeOf(XtalDecorator.prototype),"connectedCallback",this).call(this)}},{key:"onDecoPropsChange",value:function onDecoPropsChange(){if(!this._whereTargetSelector){babelHelpers.get(babelHelpers.getPrototypeOf(XtalDecorator.prototype),"onDecoPropsChange",this).call(this);return}if(!this.id){console.error("xtal-decorator requires an id");return}this.addCSSListener(this.id,this._whereTargetSelector,this.insertListener)}},{key:"whereTargetSelector",get:function get(){return this._whereTargetSelector},set:function set(val){if(this._whereTargetSelector&&this._whereTargetSelector!==val)throw"Only supports one value";this.attr(where_target_selector,val)}}],[{key:"is",get:function get(){return"xtal-decorator"}},{key:"observedAttributes",get:function get(){return babelHelpers.get(babelHelpers.getPrototypeOf(XtalDecorator),"observedAttributes",this).concat([where_target_selector])}}]);return XtalDecorator}(observeCssSelector(XtalDecor));define(XtalDecorator);