{
  "version": "experimental",
  "tags": [
    {
      "name": "xtal-decorator",
      "path": "./xtal-decorator-example0.js",
      "attributes": [
        {
          "name": "props",
          "description": "Property values to set on target elements",
          "type": "{ [key: string]: any; } | undefined"
        },
        {
          "name": "attrib",
          "description": "Attribute values to set on target elements",
          "type": "{ [key: string]: any; } | undefined"
        },
        {
          "name": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        }
      ],
      "properties": [
        {
          "name": "is",
          "type": "string",
          "default": "\"xtal-decorator\""
        },
        {
          "name": "props",
          "attribute": "props",
          "description": "Property values to set on target elements",
          "type": "{ [key: string]: any; } | undefined"
        },
        {
          "name": "attribs",
          "attribute": "attrib",
          "description": "Attribute values to set on target elements",
          "type": "{ [key: string]: any; } | undefined"
        },
        {
          "name": "insertTemplate",
          "description": "If template is provided in the innerHTML, indicate the \r\nplacement of the cloned template relative to the target element.",
          "type": "\"beforebegin\"|\"afterbegin\"|\"beforeend\"|\"afterend\"",
          "default": "\"afterend\""
        },
        {
          "name": "selectorSequence",
          "description": "Sequence of css selectors within nested ShadowDOM realms.",
          "type": "never[]",
          "default": "[]"
        },
        {
          "name": "attributeProps",
          "type": "({ disabled, props, attribs, insertTemplate, selectorSequence, targetElement, templateElement }: XtalDecorator) => AttributeProps",
          "default": "\"({disabled, props, attribs, insertTemplate, selectorSequence, targetElement, templateElement}: XtalDecorator) => ({\\r\\n        obj: [props, attribs, selectorSequence, targetElement, templateElement],\\r\\n        jsonProp:[props, attribs, selectorSequence],\\r\\n        str: [insertTemplate],\\r\\n    } as AttributeProps)\""
        },
        {
          "name": "disabled",
          "attribute": "disabled",
          "description": "Any component that emits events should not do so if it is disabled.\r\nNote that this is not enforced, but the disabled property is made available.\r\nUsers of this mix-in should ensure not to call \"de\" if this property is set to true.",
          "type": "boolean"
        }
      ]
    }
  ]
}